{"version":3,"sources":["components/Wrapper/Wrapper.tsx","components/Button/Button.tsx","Pomodoro.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","children","className","Button","props","padPomodoroTimer","value","toString","padStart","reducer","state","action","type","isActive","intervalId","payload","timeLeft","clearInterval","BREAK_MINUTES","BASE_POMODORO_MINUTES","Math","floor","x","Error","assertNever","Pomodoro","useReducer","dispatch","minutes","seconds","Number","useEffect","title","onClick","window","setInterval","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ec1914f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Wrapper: React.FC = ({ children }) => (\n  <div className=\"container mx-auto px-4 min-h-screen flex flex-col\">\n    <main className=\"flex flex-col justify-center items-center w-full flex-auto\">\n      {children}\n    </main>\n    <footer className=\"text-center text-xs py-3\">\n      Made with CRA, hosted on GitHub Pages\n    </footer>\n  </div>\n);\n\nexport default Wrapper;\n","import React from \"react\";\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst Button: React.FC<ButtonProps> = ({ children, ...props }) => (\n  <button\n    className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-75 disabled:cursor-not-allowed disabled:bg-red-400\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React, { useEffect, useReducer } from \"react\";\nimport { BsFillPlayFill, BsPauseFill } from \"react-icons/bs\";\nimport { FiPlus, FiMinus } from \"react-icons/fi\";\nimport { RiRestartLine } from \"react-icons/ri\";\nimport Wrapper from \"./components/Wrapper\";\nimport Button from \"./components/Button\";\n\nconst BASE_POMODORO_MINUTES = 25;\nconst BREAK_MINUTES = 5;\n\nconst padPomodoroTimer = (value: number) => value.toString().padStart(2, \"0\");\n\ntype State = {\n  timeLeft: number;\n  isActive: boolean;\n  intervalId: number;\n};\n\ntype Action =\n  | { type: \"start\"; payload: { intervalId: number } }\n  | { type: \"increase-session\" }\n  | { type: \"decrease-session\" }\n  | { type: \"decrease-timer\" }\n  | { type: \"stop\" }\n  | { type: \"restart\" };\n\nconst assertNever = (x: never): never => {\n  throw new Error(\"Not all variants of the discriminated union all covered.\");\n};\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"start\": {\n      return {\n        ...state,\n        isActive: true,\n        intervalId: action.payload.intervalId,\n      };\n    }\n    case \"decrease-timer\": {\n      if (state.timeLeft >= 1) {\n        return {\n          ...state,\n          timeLeft: state.timeLeft - 1,\n        };\n      }\n\n      clearInterval(state.intervalId);\n\n      return {\n        ...state,\n        isActive: false,\n        timeLeft: BREAK_MINUTES * 60,\n      };\n    }\n    case \"stop\": {\n      clearInterval(state.intervalId);\n\n      return {\n        ...state,\n        isActive: false,\n      };\n    }\n    case \"restart\": {\n      clearInterval(state.intervalId);\n\n      return {\n        ...state,\n        isActive: false,\n        timeLeft: BASE_POMODORO_MINUTES * 60,\n      };\n    }\n    case \"increase-session\": {\n      return {\n        ...state,\n        timeLeft: state.timeLeft + BASE_POMODORO_MINUTES * 60,\n      };\n    }\n    case \"decrease-session\": {\n      const minutes = Math.floor(state.timeLeft / 60);\n\n      if (minutes >= 25) {\n        return {\n          ...state,\n          timeLeft: state.timeLeft - BASE_POMODORO_MINUTES * 60,\n        };\n      }\n\n      return {\n        ...state,\n      };\n    }\n    default:\n      return assertNever(action);\n  }\n};\n\nconst Pomodoro: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    timeLeft: BASE_POMODORO_MINUTES * 60,\n    isActive: false,\n    intervalId: -1,\n  });\n\n  const minutes = padPomodoroTimer(Math.floor(state.timeLeft / 60));\n  const seconds = padPomodoroTimer(state.timeLeft - Number(minutes) * 60);\n\n  const startPomodoro = () => {\n    const intervalId = window.setInterval(() => {\n      dispatch({ type: \"decrease-timer\" });\n    }, 1000);\n\n    dispatch({ type: \"start\", payload: { intervalId } });\n  };\n\n  const stopPomodoro = () => {\n    dispatch({ type: \"stop\" });\n  };\n\n  const restartPomodoro = () => {\n    dispatch({ type: \"restart\" });\n  };\n\n  const increasePomodoro = () => {\n    dispatch({ type: \"increase-session\" });\n  };\n\n  const decreasePomodoro = () => {\n    dispatch({ type: \"decrease-session\" });\n  };\n\n  useEffect(() => {\n    return () => {\n      clearInterval(state.intervalId);\n    };\n  }, [state.intervalId]);\n\n  return (\n    <Wrapper>\n      <div className=\"text-6xl font-semibold\">\n        <span>{minutes}</span>\n        <span>:</span>\n        <span>{seconds}</span>\n      </div>\n\n      <div className=\"grid grid-cols-5 col-gap-2\">\n        <Button\n          title=\"Start session\"\n          onClick={startPomodoro}\n          disabled={state.isActive}\n        >\n          <BsFillPlayFill />\n        </Button>\n        <Button\n          title=\"Stop session\"\n          onClick={stopPomodoro}\n          disabled={!state.isActive}\n        >\n          <BsPauseFill />\n        </Button>\n        <Button title=\"Restart session\" onClick={restartPomodoro}>\n          <RiRestartLine />\n        </Button>\n        <Button\n          title=\"Increase the pomodoro with 25 minutes\"\n          onClick={increasePomodoro}\n        >\n          <FiPlus />\n        </Button>\n        <Button\n          title=\"Decrease the pomodoro with 25 minutes\"\n          onClick={decreasePomodoro}\n          disabled={Number(minutes) < 25}\n        >\n          <FiMinus />\n        </Button>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Pomodoro from \"./Pomodoro\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind/tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pomodoro />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}